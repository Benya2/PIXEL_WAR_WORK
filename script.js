const colorsChoice = document.querySelector('#colorsChoice');
const game = document.querySelector('#game');
const cursor = document.querySelector('#cursor');
const authButton = document.querySelector('#authButton');  // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

game.width = 1200;
game.height = 600;
const gridCellSize = 10;

const ctx = game.getContext('2d');

// –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π canvas –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∫–∏
const gridCanvas = document.createElement('canvas');
gridCanvas.width = game.width;
gridCanvas.height = game.height;
const gridCtx = gridCanvas.getContext('2d');

// –î–æ–±–∞–≤–ª—è–µ–º gridCanvas –≤ DOM, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —Ä—è–¥–æ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º canvas
game.parentElement.appendChild(gridCanvas);

const colorList = [
    "#FFEBEE", "#FCE4EC", "#F3E5F5", "#B39DDB", "#9FA8DA", "#90CAF9", "#81D4FA", "#80DEEA",
    "#4DB6AC", "#66BB6A", "#9CCC65", "#CDDC39", "#FFEB3B", "#FFC107", "#FF9800", "#FF5722",
    "#A1887F", "#E0E0E0", "#90A4AE", "#000"
];
let currentColorChoice = colorList[9];

const firebaseConfig = {
  apiKey: "AIzaSyAtpMIFFcilesRPHEwlIYXyQhBfGPyKrC0",
  authDomain: "yosiki-bb1ae.firebaseapp.com",
  projectId: "yosiki-bb1ae",
  storageBucket: "yosiki-bb1ae.firebasestorage.app",
  messagingSenderId: "701005418429",
  appId: "1:701005418429:web:7593d4f61f332f9ce88cd4",
  measurementId: "G-2V4S6LZ3EN"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = firebase.firestore();
const auth = firebase.auth();

// –õ–æ–≥–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
authButton.addEventListener('click', () => {
    const email = prompt('Enter your email:');
    const password = prompt('Enter your password:');

    auth.signInWithEmailAndPassword(email, password)
        .then(userCredential => {
            const user = userCredential.user;
            console.log('User signed in:', user);
            alert('You are now logged in!');
            authButton.textContent = 'Log Out'; // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–í—ã–π—Ç–∏"
        })
        .catch(error => {
            console.error(error);
            alert('Failed to sign in. Please check your credentials.');
        });
});

// –õ–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞
auth.onAuthStateChanged(user => {
    if (user) {
        authButton.textContent = 'Log Out'; // –ö–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏"
    } else {
        authButton.textContent = 'Log In'; // –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏"
    }
});

colorList.forEach(color => {
    const colorItem = document.createElement('div');
    colorItem.style.backgroundColor = color;
    colorsChoice.appendChild(colorItem);

    colorItem.addEventListener('click', () => {
        currentColorChoice = color;

        colorItem.innerHTML = `<i class="fa-solid fa-check"></i>`;

        setTimeout(() => {
            colorItem.innerHTML = "";
        }, 1000);
    });
});

function createPixel(x, y, color) {
    ctx.beginPath();

    if (color.toUpperCase() === "#FFFFFF") {
        // –ï—â—ë –º–µ–Ω—å—à–∏–π –æ—Ç—Å—Ç—É–ø ‚Äî —Ç–µ–ø–µ—Ä—å 3 –ø–∏–∫—Å–µ–ª—è —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω
        const inset = 3;
        ctx.fillStyle = color;
        ctx.fillRect(
            x + inset,
            y + inset,
            gridCellSize - inset * 2,
            gridCellSize - inset * 2
        );
    } else {
        ctx.fillStyle = color;
        ctx.fillRect(x, y, gridCellSize, gridCellSize);
    }
}




// –î–æ–±–∞–≤–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å –≤ –∏–≥—Ä—É –∏ –≤ Firestore
function addPixelIntoGame() {
    const user = auth.currentUser;
    if (!user) {
        alert('You must be logged in to place pixels!');
        return;
    }

    const x = cursor.offsetLeft;
    const y = cursor.offsetTop - game.offsetTop;
    const pixelKey = `${x}-${y}`;
    const pixelRef = db.collection('pixels').doc(pixelKey);

    const isWhite = currentColorChoice.toUpperCase() === "#FFFFFF";

    if (isWhite) {
        // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–µ–ª—ã–π –ø–∏–∫—Å–µ–ª—å
        pixelRef.delete()
            .then(() => {
                console.log(`‚úÖ –£–¥–∞–ª—ë–Ω –±–µ–ª—ã–π –ø–∏–∫—Å–µ–ª—å: ${pixelKey}`);
                deletePixel(x, y);
            })
            .catch(err => {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–µ–ª–æ–≥–æ –ø–∏–∫—Å–µ–ª—è:", err);
            });

        // –£–¥–∞–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å –ø–æ–¥ –Ω–∏–º
        const belowY = y + gridCellSize;
        const belowKey = `${x}-${belowY}`;
        const belowRef = db.collection('pixels').doc(belowKey);

        belowRef.get().then(doc => {
            if (doc.exists) {
                belowRef.delete().then(() => {
                    console.log(`‚úÖ –£–¥–∞–ª—ë–Ω –ø–∏–∫—Å–µ–ª—å –ø–æ–¥ –±–µ–ª—ã–º: ${belowKey}`);
                    deletePixel(x, belowY);
                }).catch(err => {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∏–∂–Ω–µ–≥–æ –ø–∏–∫—Å–µ–ª—è:", err);
                });
            }
        });

        // –ù–ò–ß–ï–ì–û –ù–ï –°–û–•–†–ê–ù–Ø–ï–ú! ‚Äî –ø—Ä–æ—Å—Ç–æ return
        return;
    }

    // üü© –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞, –µ—Å–ª–∏ —Ü–≤–µ—Ç –ù–ï –±–µ–ª—ã–π
    pixelRef.get().then(docSnapshot => {
        if (docSnapshot.exists) {
            pixelRef.delete().then(() => {
                console.log(`üîÅ –°—Ç–∞—Ä—ã–π –ø–∏–∫—Å–µ–ª—å —É–¥–∞–ª—ë–Ω: ${pixelKey}`);
            }).catch(err => {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", err);
            });
        }

        const newPixel = { x, y, color: currentColorChoice };
        pixelRef.set(newPixel, { merge: true })
            .then(() => {
                console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–∏–∫—Å–µ–ª—å: ${pixelKey}`);
                createPixel(x, y, currentColorChoice);
            })
            .catch(err => {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∏–∫—Å–µ–ª—è:", err);
            });
    }).catch(error => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏–∫—Å–µ–ª—è:", error);
    });
}


// –§—É–Ω–∫—Ü–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∫–∏
function drawGrids(ctx, width, height, cellWidth, cellHeight) {
    ctx.beginPath();
    ctx.strokeStyle = "#ccc";

    for (let i = 0; i <= width; i += cellWidth) {
        ctx.moveTo(i, 0);
        ctx.lineTo(i, height);
    }

    for (let i = 0; i <= height; i += cellHeight) {
        ctx.moveTo(0, i);
        ctx.lineTo(width, i);
    }
    ctx.stroke();
}

// –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É –Ω–∞ gridCtx
drawGrids(gridCtx, game.width, game.height, gridCellSize, gridCellSize);

// –î–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä
game.addEventListener('mousemove', function (event) {
    const cursorLeft = event.clientX - (cursor.offsetWidth / 2);
    const cursorTop = event.clientY - (cursor.offsetHeight / 2);

    cursor.style.left = Math.floor(cursorLeft / gridCellSize) * gridCellSize + "px";
    cursor.style.top = Math.floor(cursorTop / gridCellSize) * gridCellSize + "px";
});

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∏–∫—Å–µ–ª–∏ –∏–∑ Firestore –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
function loadPixels() {
    db.collection('pixels').get().then(querySnapshot => {
        querySnapshot.forEach(doc => {
            const { x, y, color } = doc.data();
            createPixel(x, y, color);
        });
    });
}

loadPixels();
